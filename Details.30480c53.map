{"version":3,"sources":["Carousel.js","Details.js"],"names":["Carousel","state","photos","active","handleIndexClick","event","setState","target","dataset","index","React","Component","hero","value","map","photo","media","filter","Details","petfinder","key","secret","ModalLoader","loader","loading","showModal","toggleModal","pet","get","output","id","props","then","data","breed","Array","isArray","breeds","join","name","animal","location","contact","city","description","catch"],"mappings":"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","file":"Details.30480c53.map","sourceRoot":"../src","sourcesContent":["import React from \"react\";\n\nclass Carousel extends React.Component {\n  state = {\n    photos: [],\n    active: 0\n  };\n  static getDerivedStateFromProps({ media }) {\n    let photos = [];\n    if (media && media.photos && media.photos.photo) {\n      photos = media.photos.photo.filter(photo => photo[\"@size\"] === \"pn\");\n    }\n\n    return { photos };\n  }\n  handleIndexClick = event => {\n    this.setState({\n      active: +event.target.dataset.index\n    });\n  };\n  render() {\n    const { photos, active } = this.state;\n\n    let hero = \"http://placecorgi.com/300/300\";\n    if (photos[active] && photos[active].value) {\n      hero = photos[active].value;\n    }\n\n    return (\n      <div className=\"carousel\">\n        <img src={hero} alt=\"animal\" />\n        <div className=\"carousel-smaller\">\n          {photos.map((photo, index) => (\n            /* eslint-disable-next-line */\n            <img\n              onClick={this.handleIndexClick}\n              data-index={index}\n              key={photo.value}\n              src={photo.value}\n              className={index === active ? \"active\" : \"\"}\n              alt=\"animal thumnbail\"\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from \"react\";\nimport pf from \"petfinder-client\";\nimport { navigate } from \"@reach/router\";\nimport Carousel from \"./Carousel\";\nimport Loadable from \"react-loadable\";\n/** below statement is commented to implement code splitting */\n// import Modal from \"./Modal\";\n\nconst petfinder = pf({\n  key: process.env.API_KEY,\n  secret: process.env.API_SECRET\n});\n\nconst ModalLoader = Loadable({\n  loader: () => import(\"./Modal\"),\n  loading() {\n    return <div>Loading split code.</div>;\n  }\n});\n\nclass Details extends React.Component {\n  state = {\n    loading: true,\n    showModal: false\n  };\n  toggleModal = () => {\n    this.setState({\n      showModal: !this.state.showModal\n    });\n  };\n  componentDidMount() {\n    petfinder.pet\n      .get({\n        output: \"full\",\n        id: this.props.id\n      })\n      .then(data => {\n        let breed;\n        if (Array.isArray(data.petfinder.pet.breeds.breed)) {\n          breed = data.petfinder.pet.breeds.breed.join(\", \");\n        } else {\n          breed = data.petfinder.pet.breeds.breed;\n        }\n        this.setState({\n          name: data.petfinder.pet.name,\n          animal: data.petfinder.pet.animal,\n          location: `${data.petfinder.pet.contact.city}, ${\n            data.petfinder.pet.contact.state\n          }`,\n          description: data.petfinder.pet.description,\n          media: data.petfinder.pet.media,\n          breed,\n          loading: false\n        });\n      })\n      .catch(() => {\n        navigate(\"/\");\n      });\n  }\n  render() {\n    if (this.state.loading) {\n      return <h1>loading … </h1>;\n    }\n\n    const {\n      media,\n      animal,\n      breed,\n      location,\n      description,\n      name,\n      showModal\n    } = this.state;\n\n    return (\n      <div className=\"details\">\n        <Carousel media={media} />\n        <div>\n          <h1>{name}</h1>\n          <h2>{`${animal} — ${breed} — ${location}`}</h2>\n          <button onClick={this.toggleModal}>Adopt {name}</button>\n          <p>{description}</p>\n          {showModal ? (\n            <ModalLoader>\n              <h1>Would you like to adopt {name}</h1>\n              <div className=\"buttons\">\n                <button onClick={this.toggleModal}>Yes</button>\n                <button onClick={this.toggleModal}>Hell Yes!!</button>\n              </div>\n            </ModalLoader>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Details;\n"]}