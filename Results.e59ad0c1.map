{"version":3,"sources":["Pet.js","Results.js"],"names":["Pet","React","Component","log","props","name","animal","breed","media","location","id","photos","photo","filter","hero","value","petfinder","secret","Results","search","pet","find","then","pets","data","Array","isArray","setState","state","map","breeds","join","contact","city","mapStateToProps"],"mappings":"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","file":"Results.e59ad0c1.map","sourceRoot":"../src","sourcesContent":["import React from \"react\";\nimport { Link } from \"@reach/router\";\n\nclass Pet extends React.Component {\n  componentDidMount() {\n    console.log(\"pet comp\");\n  }\n  componentWillUnmount() {\n    console.log(\"pet comp unmounted\");\n  }\n  render() {\n    const { name, animal, breed, media, location, id } = this.props;\n    let photos = [];\n    if (media && media.photos && media.photos.photo) {\n      photos = media.photos.photo.filter(photo => photo[\"@size\"] === \"pn\");\n    }\n\n    let hero = \"http://placecorgi.com/300/300\";\n    if (photos[0] && photos[0].value) {\n      hero = photos[0].value;\n    }\n\n    return (\n      <Link to={`/details/${id}`} className=\"pet\">\n        <div className=\"image-container\">\n          <img src={hero} alt={name} />\n        </div>\n        <div className=\"info\">\n          <h1>{name}</h1>\n          <h2>{`${animal} — ${breed} — ${location}`}</h2>\n        </div>\n      </Link>\n    );\n  }\n}\n\nexport default Pet;\n","import React from \"react\";\nimport pf from \"petfinder-client\";\nimport { connect } from \"react-redux\";\nimport Pet from \"./Pet\";\nimport SearchBox from \"./SearchBox\";\n\nconst petfinder = pf({\n  key: process.env.API_KEY,\n  secret: process.env.API_SECRET\n});\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pets: []\n    };\n  }\n  componentDidMount() {\n    this.search();\n  }\n  search = () => {\n    petfinder.pet\n      .find({\n        location: this.props.location,\n        animal: this.props.animal,\n        breed: this.props.breed,\n        output: \"full\"\n      })\n      .then(data => {\n        let pets;\n        if (data.petfinder.pets && data.petfinder.pets.pet) {\n          if (Array.isArray(data.petfinder.pets.pet)) {\n            pets = data.petfinder.pets.pet;\n          } else {\n            pets = [data.petfinder.pets.pet];\n          }\n        } else {\n          pets = [];\n        }\n        this.setState({\n          pets: pets\n        });\n      });\n  };\n  render() {\n    return (\n      <div className=\"search\">\n        <SearchBox search={this.search} />\n        {this.state.pets.map(pet => {\n          let breed;\n          if (Array.isArray(pet.breeds.breed)) {\n            breed = pet.breeds.breed.join(\", \");\n          } else {\n            breed = pet.breeds.breed;\n          }\n          return (\n            <Pet\n              animal={pet.animal}\n              key={pet.id}\n              name={pet.name}\n              breed={breed}\n              media={pet.media}\n              location={`${pet.contact.city}, ${pet.contact.state}`}\n              id={pet.id}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ location, animal, breed, breeds }) => ({\n  location,\n  animal,\n  breed,\n  breeds\n});\nexport default connect(mapStateToProps)(Results);\n"]}